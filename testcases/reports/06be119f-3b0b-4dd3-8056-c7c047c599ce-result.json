{"name": "test_item_buy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.140)\nStacktrace:\n\tGetHandleVerifier [0x00007FF71B5B6CC5+28821]\n\t(No symbol) [0x00007FF71B523850]\n\t(No symbol) [0x00007FF71B3C578A]\n\t(No symbol) [0x00007FF71B39F4F5]\n\t(No symbol) [0x00007FF71B446247]\n\t(No symbol) [0x00007FF71B45ECE2]\n\t(No symbol) [0x00007FF71B43F0A3]\n\t(No symbol) [0x00007FF71B40A778]\n\t(No symbol) [0x00007FF71B40B8E1]\n\tGetHandleVerifier [0x00007FF71B8EFCCD+3408029]\n\tGetHandleVerifier [0x00007FF71B90743F+3504143]\n\tGetHandleVerifier [0x00007FF71B8FB61D+3455469]\n\tGetHandleVerifier [0x00007FF71B67BDCB+835995]\n\t(No symbol) [0x00007FF71B52EB6F]\n\t(No symbol) [0x00007FF71B52A824]\n\t(No symbol) [0x00007FF71B52A9BD]\n\t(No symbol) [0x00007FF71B51A1A9]\n\tBaseThreadInitThunk [0x00007FFA54877374+20]\n\tRtlUserThreadStart [0x00007FFA5509CC91+33]", "trace": "self = <testcases.test_completeflow.TestCompleteFlow object at 0x000002053B015F30>\n\n    def test_item_buy(self):\n        bi = BuyItemLocators(self.driver)\n>       bi.buy_item(\"Build your own cheap computer\")\n\ntest_completeflow.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\buy_item_locators.py:50: in buy_item\n    self.desktops()\n..\\pages\\buy_item_locators.py:25: in desktops\n    self.driver.find_element(By.XPATH,self.desktop).click()\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002053B08EA50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF71B51A1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA54877374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA5509CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71B5B6CC5+28821]\nE       \t(No symbol) [0x00007FF71B523850]\nE       \t(No symbol) [0x00007FF71B3C578A]\nE       \t(No symbol) [0x00007FF71B39F4F5]\nE       \t(No symbol) [0x00007FF71B446247]\nE       \t(No symbol) [0x00007FF71B45ECE2]\nE       \t(No symbol) [0x00007FF71B43F0A3]\nE       \t(No symbol) [0x00007FF71B40A778]\nE       \t(No symbol) [0x00007FF71B40B8E1]\nE       \tGetHandleVerifier [0x00007FF71B8EFCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF71B90743F+3504143]\nE       \tGetHandleVerifier [0x00007FF71B8FB61D+3455469]\nE       \tGetHandleVerifier [0x00007FF71B67BDCB+835995]\nE       \t(No symbol) [0x00007FF71B52EB6F]\nE       \t(No symbol) [0x00007FF71B52A824]\nE       \t(No symbol) [0x00007FF71B52A9BD]\nE       \t(No symbol) [0x00007FF71B51A1A9]\nE       \tBaseThreadInitThunk [0x00007FFA54877374+20]\nE       \tRtlUserThreadStart [0x00007FFA5509CC91+33]\n\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "start": 1734424659648, "stop": 1734424663289, "uuid": "0f455b00-2960-4551-bced-3ff4af87f473", "historyId": "813bc4140d7080966ab5963f77a51fdc", "testCaseId": "813bc4140d7080966ab5963f77a51fdc", "fullName": "test_completeflow.TestCompleteFlow#test_item_buy", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setUp')"}, {"name": "suite", "value": "test_completeflow"}, {"name": "subSuite", "value": "TestCompleteFlow"}, {"name": "host", "value": "IB-SEZ-LAP-431"}, {"name": "thread", "value": "2068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_completeflow"}]}